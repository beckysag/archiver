I tested with both binary and text files (but mostly binary) using random c libraries copied off of os-class. I (mostly) wrote the functions in the order mentioned, and tested as I went. Every test I did, I ran the same test with the ar command to verify the results. For the functions that involved writing to a file, a used ar to write it back to confirm (e.g. using myar for quick append and append all, and then ar for print verbose to check results). I started with the most broad case, and then did fringe testing for cases that were less likely. Once I finished writng the functions, I wrote my makefile and used it to do further testing. 

If I wasn't sure how a certain aspect of my function should behave, I did the same thing with ar and used that to decide (e.g. I wasn't sure if I should add a new line after writing a new file (if on an uneven byte) or before the next one, so I created an uneven file to test, used ar to append it, and checked the results.)
